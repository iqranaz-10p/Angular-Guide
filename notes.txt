creating a component 

@Component({
    selector: 'app-header',                 --> component selector
    templateUrl: './header.component.html', --> template
    standalone: true,
    styleUrl: './header.component.scss'     
})

export class HeaderComponent {
  --> data and methods inside 
}


[src] = "imagePath" --> attribute binding

attribute and property are different things, HTML attributes vs DOM properties --> 

ANgular's change detection mechanism uses zone.js (older) and after v16 uses signals
to get value of the signals use it as function().name --> doesn't need to check change everywhere
imagePath = computed (()=> function) --> can be used instead of getters incase of changes etc
now it will be called as imagePath()

@Input() @Component --> decorators
avatar = input<type>() --> signal Input

! ==> add this to convince angular that value will not be undefined

to create new component --> ng g c <component name> --skip-tests (this will not create test file)

directives --> ngModel --> angular powered element enhancements helps to access input of user 

pipe can be used to transform data like {{ dueDate | date: 'fullDate' }}

Dependency Injection --. we don't create class instance instead we ask angular to create one and can be use this at multiple places



************** Section3 / Angular Modules *********************

NgModule --> standalone components are recommended way of building components but can still use 
angular-based module (make components available to eachother) to building components

when working with modules don't need import array

create app.module.ts file
use NgModule decorator with declarations

if using component in module remove or make standalone false
import array in component is only valid if its standalone

update main.ts add declarations and imports

standalone and NgModule can be used together

modules helps to keep all components together

we can also create shared modules






